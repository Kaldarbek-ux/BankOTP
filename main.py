import json
import os
import pyotp
import qrcode
import bcrypt
from datetime import datetime
from utils.signature_utils import sign_message, verify_signature, generate_keys
import base64

USERS_FILE = 'data/users.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    with open(USERS_FILE, 'r') as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=4)

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def hash_password(password):
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def check_password(password, hashed):
    return bcrypt.checkpw(password.encode(), hashed.encode())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_user(users):
    username = input("–ü—Ä–∏–¥—É–º–∞–π –ª–æ–≥–∏–Ω: ").strip()
    if username in users:
        print("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    password = input("–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å: ").strip()
    otp_secret = pyotp.random_base32()

    users[username] = {
        "password": hash_password(password),
        "otp_secret": otp_secret
    }

    save_users(users)

    uri = pyotp.totp.TOTP(otp_secret).provisioning_uri(name=username, issuer_name="BankSecure")
    qrcode.make(uri).save(f"{username}_qr.png")

    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    print(f"QR-–∫–æ–¥ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google Authenticator —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {username}_qr.png")

# –í—Ö–æ–¥
def login_user(users):
    username = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ").strip()
    if username not in users:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
    if not check_password(password, users[username]['password']):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    totp = pyotp.TOTP(users[username]['otp_secret'])
    code = input("–í–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ").strip()

    if totp.verify(code):
        print(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        simulate_transaction(username)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π 2FA –∫–æ–¥.")

# –°–∏–º—É–ª—è—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
from utils.crypto_utils import encrypt_message, decrypt_message, load_key, save_key, generate_key

TRANSACTIONS_FILE = "data/transactions.log"
KEY_FILE = "keys/secret.key"

def simulate_transaction(username):
    print(f"\nüí∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {username}")
    recipient = input("–ö–æ–º—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: ")
    amount = input("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ")
    time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message = f"[{time_now}] {username} –ø–µ—Ä–µ–≤—ë–ª {amount}‚Ç∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}"
    log_transaction(username, message)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞
def get_encryption_key():
    if not os.path.exists(KEY_FILE):
        key = generate_key()
        save_key(key)
    else:
        key = load_key()
    return key

# –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∂—É—Ä–Ω–∞–ª
if not os.path.exists("keys/private_key.pem") or not os.path.exists("keys/public_key.pem"):
    generate_keys()

def log_transaction(username, message):
    key = get_encryption_key()
    encrypted = encrypt_message(message, key)

    signature = sign_message(message)
    signature_b64 = base64.b64encode(signature).decode()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ | –ø–æ–¥–ø–∏—Å—å
    with open(TRANSACTIONS_FILE, "a", encoding="utf-8") as f:
        f.write(encrypted.decode() + "|" + signature_b64 + "\n")

    print("üì© –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞, –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def view_transactions():
    key = get_encryption_key()
    if not os.path.exists(TRANSACTIONS_FILE):
        print("–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.")
        return

    with open(TRANSACTIONS_FILE, "r", encoding="utf-8") as f:
        for line in f:
            try:
                enc_data, signature_b64 = line.strip().split("|")
                decrypted = decrypt_message(enc_data.encode(), key)
                signature = base64.b64decode(signature_b64)
                valid = verify_signature(decrypted, signature)
                status = "‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞" if valid else "‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"
                print(f"{decrypted}\n{status}\n")
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ/–ø—Ä–æ–≤–µ—Ä–∫–µ:", str(e))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    users = load_users()
    while True:
        print("\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        print("2. –í–æ–π—Ç–∏")
        print("3. –í—ã–π—Ç–∏")
        print("4. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂—É—Ä–Ω–∞–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ: ").strip()
        if choice == '1':
            register_user(users)
        elif choice == '2':
            login_user(users)
        elif choice == '3':
            print("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        elif choice == '4':
            view_transactions()
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

if __name__ == "__main__":
    main()




